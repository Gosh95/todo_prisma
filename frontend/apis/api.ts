/* tslint:disable */
/* eslint-disable */
/**
 * Todo Prisma API
 * **Todo Prisma API Open API Specification** 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: goshk1995@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {any}
     * @memberof ModelError
     */
    'name'?: any;
    /**
     * 
     * @type {any}
     * @memberof ModelError
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'name'?: any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'email'?: any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'role'?: UserRoleEnum;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'createdAt'?: any;
}

export const UserRoleEnum = {
    User: 'USER',
    Role: 'ROLE'
} as const;

export type UserRoleEnum = typeof UserRoleEnum[keyof typeof UserRoleEnum];

/**
 * 
 * @export
 * @interface UserCreateReq
 */
export interface UserCreateReq {
    /**
     * 
     * @type {any}
     * @memberof UserCreateReq
     */
    'name'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserCreateReq
     */
    'email'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserCreateReq
     */
    'password'?: any;
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint for create a new user.
         * @summary Create a new user
         * @param {UserCreateReq} userCreateReq Request body for create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userCreateReq: UserCreateReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateReq' is not null or undefined
            assertParamExists('createUser', 'userCreateReq', userCreateReq)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for delete a user.
         * @summary Delete a user
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieSessionAuth required
            await setApiKeyToObject(localVarHeaderParameter, "connect.sid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for get a user detail.
         * @summary Get a user detail
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetail: async (userId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserDetail', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieSessionAuth required
            await setApiKeyToObject(localVarHeaderParameter, "connect.sid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for get a user and list of user\'s tasks.
         * @summary Get a user and list of user\'s tasks
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTasks: async (userId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserTasks', 'userId', userId)
            const localVarPath = `/users/{userId}/tasks`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieSessionAuth required
            await setApiKeyToObject(localVarHeaderParameter, "connect.sid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for get list of users.
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieSessionAuth required
            await setApiKeyToObject(localVarHeaderParameter, "connect.sid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for update a user.
         * @summary Update a user
         * @param {any} userId 
         * @param {any} body Request body for update a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: any, body: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateUser', 'body', body)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieSessionAuth required
            await setApiKeyToObject(localVarHeaderParameter, "connect.sid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint for create a new user.
         * @summary Create a new user
         * @param {UserCreateReq} userCreateReq Request body for create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userCreateReq: UserCreateReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userCreateReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint for delete a user.
         * @summary Delete a user
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint for get a user detail.
         * @summary Get a user detail
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDetail(userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDetail(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint for get a user and list of user\'s tasks.
         * @summary Get a user and list of user\'s tasks
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTasks(userId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTasks(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint for get list of users.
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint for update a user.
         * @summary Update a user
         * @param {any} userId 
         * @param {any} body Request body for update a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: any, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Endpoint for create a new user.
         * @summary Create a new user
         * @param {UserCreateReq} userCreateReq Request body for create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userCreateReq: UserCreateReq, options?: any): AxiosPromise<void> {
            return localVarFp.createUser(userCreateReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for delete a user.
         * @summary Delete a user
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: any, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for get a user detail.
         * @summary Get a user detail
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetail(userId: any, options?: any): AxiosPromise<any> {
            return localVarFp.getUserDetail(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for get a user and list of user\'s tasks.
         * @summary Get a user and list of user\'s tasks
         * @param {any} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTasks(userId: any, options?: any): AxiosPromise<any> {
            return localVarFp.getUserTasks(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for get list of users.
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<any> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for update a user.
         * @summary Update a user
         * @param {any} userId 
         * @param {any} body Request body for update a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: any, body: any, options?: any): AxiosPromise<void> {
            return localVarFp.updateUser(userId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Endpoint for create a new user.
     * @summary Create a new user
     * @param {UserCreateReq} userCreateReq Request body for create a new user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(userCreateReq: UserCreateReq, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).createUser(userCreateReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for delete a user.
     * @summary Delete a user
     * @param {any} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(userId: any, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for get a user detail.
     * @summary Get a user detail
     * @param {any} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserDetail(userId: any, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserDetail(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for get a user and list of user\'s tasks.
     * @summary Get a user and list of user\'s tasks
     * @param {any} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserTasks(userId: any, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserTasks(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for get list of users.
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for update a user.
     * @summary Update a user
     * @param {any} userId 
     * @param {any} body Request body for update a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(userId: any, body: any, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUser(userId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


